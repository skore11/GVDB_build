//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-19805474
// Cuda compilation tools, release 7.5, V7.5.16
// Based on LLVM 3.4svn
//

.version 4.3
.target sm_35
.address_size 32

	// .weak	cudaMalloc
.global .texref volTexInC;
.global .texref volTexInF;
.global .surfref volTexOut;

.weak .func  (.param .b32 func_retval0) cudaMalloc(
	.param .b32 cudaMalloc_param_0,
	.param .b32 cudaMalloc_param_1
)
{
	.reg .b32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .weak	cudaFuncGetAttributes
.weak .func  (.param .b32 func_retval0) cudaFuncGetAttributes(
	.param .b32 cudaFuncGetAttributes_param_0,
	.param .b32 cudaFuncGetAttributes_param_1
)
{
	.reg .b32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .weak	cudaDeviceGetAttribute
.weak .func  (.param .b32 func_retval0) cudaDeviceGetAttribute(
	.param .b32 cudaDeviceGetAttribute_param_0,
	.param .b32 cudaDeviceGetAttribute_param_1,
	.param .b32 cudaDeviceGetAttribute_param_2
)
{
	.reg .b32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .weak	cudaGetDevice
.weak .func  (.param .b32 func_retval0) cudaGetDevice(
	.param .b32 cudaGetDevice_param_0
)
{
	.reg .b32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .weak	cudaOccupancyMaxActiveBlocksPerMultiprocessor
.weak .func  (.param .b32 func_retval0) cudaOccupancyMaxActiveBlocksPerMultiprocessor(
	.param .b32 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_0,
	.param .b32 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_1,
	.param .b32 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_2,
	.param .b32 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_3
)
{
	.reg .b32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .weak	cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags
.weak .func  (.param .b32 func_retval0) cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(
	.param .b32 cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_param_0,
	.param .b32 cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_param_1,
	.param .b32 cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_param_2,
	.param .b32 cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_param_3,
	.param .b32 cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_param_4
)
{
	.reg .b32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .globl	kernelFillTex
.visible .entry kernelFillTex(
	.param .align 4 .b8 kernelFillTex_param_0[12],
	.param .u32 kernelFillTex_param_1
)
{
	.reg .pred 	%p<6>;
	.reg .b32 	%r<19>;
	.reg .b64 	%rd<2>;


	ld.param.u32 	%r5, [kernelFillTex_param_0+8];
	ld.param.u32 	%r6, [kernelFillTex_param_0];
	ld.param.u32 	%r7, [kernelFillTex_param_0+4];
	ld.param.u32 	%r4, [kernelFillTex_param_1];
	mov.u32 	%r8, %ntid.x;
	mov.u32 	%r9, %ctaid.x;
	mov.u32 	%r10, %ntid.y;
	mov.u32 	%r11, %ctaid.y;
	mov.u32 	%r12, %ntid.z;
	mov.u32 	%r13, %ctaid.z;
	mov.u32 	%r14, %tid.x;
	mad.lo.s32 	%r1, %r8, %r9, %r14;
	mov.u32 	%r15, %tid.y;
	mad.lo.s32 	%r2, %r10, %r11, %r15;
	mov.u32 	%r16, %tid.z;
	mad.lo.s32 	%r3, %r12, %r13, %r16;
	setp.ge.u32	%p1, %r2, %r7;
	setp.ge.u32	%p2, %r1, %r6;
	or.pred  	%p3, %p2, %p1;
	setp.ge.u32	%p4, %r3, %r5;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	BB6_2;

	mul.lo.s32 	%r17, %r1, %r4;
	mov.u32 	%r18, 0;
	sust.b.3d.b32.trap 	[volTexOut, {%r17, %r2, %r3, %r3}], {%r18};

BB6_2:
	ret;
}

	// .globl	kernelCopyTexC
.visible .entry kernelCopyTexC(
	.param .align 4 .b8 kernelCopyTexC_param_0[12],
	.param .align 4 .b8 kernelCopyTexC_param_1[12]
)
{
	.reg .pred 	%p<6>;
	.reg .b16 	%rs<3>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<26>;
	.reg .b64 	%rd<3>;


	ld.param.u32 	%r6, [kernelCopyTexC_param_0+8];
	ld.param.u32 	%r5, [kernelCopyTexC_param_0+4];
	ld.param.u32 	%r4, [kernelCopyTexC_param_0];
	ld.param.u32 	%r7, [kernelCopyTexC_param_1+8];
	ld.param.u32 	%r8, [kernelCopyTexC_param_1];
	ld.param.u32 	%r9, [kernelCopyTexC_param_1+4];
	mov.u32 	%r10, %ntid.x;
	mov.u32 	%r11, %ctaid.x;
	mov.u32 	%r12, %ntid.y;
	mov.u32 	%r13, %ctaid.y;
	mov.u32 	%r14, %ntid.z;
	mov.u32 	%r15, %ctaid.z;
	mov.u32 	%r16, %tid.x;
	mad.lo.s32 	%r1, %r10, %r11, %r16;
	mov.u32 	%r17, %tid.y;
	mad.lo.s32 	%r2, %r12, %r13, %r17;
	mov.u32 	%r18, %tid.z;
	mad.lo.s32 	%r3, %r14, %r15, %r18;
	setp.ge.u32	%p1, %r2, %r9;
	setp.ge.u32	%p2, %r1, %r8;
	or.pred  	%p3, %p2, %p1;
	setp.ge.u32	%p4, %r3, %r7;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	BB7_2;

	cvt.rn.f32.u32	%f1, %r3;
	cvt.rn.f32.u32	%f2, %r2;
	cvt.rn.f32.u32	%f3, %r1;
	tex.3d.v4.u32.f32	{%r19, %r20, %r21, %r22}, [volTexInC, {%f3, %f2, %f1, %f1}];
	cvt.u16.u32	%rs1, %r19;
	add.s32 	%r23, %r1, %r4;
	add.s32 	%r24, %r2, %r5;
	add.s32 	%r25, %r3, %r6;
	and.b16  	%rs2, %rs1, 255;
	sust.b.3d.b8.trap 	[volTexOut, {%r23, %r24, %r25, %r25}], {%rs2};

BB7_2:
	ret;
}

	// .globl	kernelCopyTexF
.visible .entry kernelCopyTexF(
	.param .align 4 .b8 kernelCopyTexF_param_0[12],
	.param .align 4 .b8 kernelCopyTexF_param_1[12]
)
{
	.reg .pred 	%p<6>;
	.reg .f32 	%f<8>;
	.reg .b32 	%r<24>;
	.reg .b64 	%rd<3>;


	ld.param.u32 	%r6, [kernelCopyTexF_param_0+8];
	ld.param.u32 	%r5, [kernelCopyTexF_param_0+4];
	ld.param.u32 	%r4, [kernelCopyTexF_param_0];
	ld.param.u32 	%r7, [kernelCopyTexF_param_1+8];
	ld.param.u32 	%r8, [kernelCopyTexF_param_1];
	ld.param.u32 	%r9, [kernelCopyTexF_param_1+4];
	mov.u32 	%r10, %ntid.x;
	mov.u32 	%r11, %ctaid.x;
	mov.u32 	%r12, %ntid.y;
	mov.u32 	%r13, %ctaid.y;
	mov.u32 	%r14, %ntid.z;
	mov.u32 	%r15, %ctaid.z;
	mov.u32 	%r16, %tid.x;
	mad.lo.s32 	%r1, %r10, %r11, %r16;
	mov.u32 	%r17, %tid.y;
	mad.lo.s32 	%r2, %r12, %r13, %r17;
	mov.u32 	%r18, %tid.z;
	mad.lo.s32 	%r3, %r14, %r15, %r18;
	setp.ge.u32	%p1, %r2, %r9;
	setp.ge.u32	%p2, %r1, %r8;
	or.pred  	%p3, %p2, %p1;
	setp.ge.u32	%p4, %r3, %r7;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	BB8_2;

	cvt.rn.f32.u32	%f1, %r3;
	cvt.rn.f32.u32	%f2, %r2;
	cvt.rn.f32.u32	%f3, %r1;
	tex.3d.v4.f32.f32	{%f4, %f5, %f6, %f7}, [volTexInF, {%f3, %f2, %f1, %f1}];
	add.s32 	%r19, %r1, %r4;
	shl.b32 	%r20, %r19, 2;
	add.s32 	%r21, %r2, %r5;
	add.s32 	%r22, %r3, %r6;
	mov.b32 	 %r23, %f4;
	sust.b.3d.b32.trap 	[volTexOut, {%r20, %r21, %r22, %r22}], {%r23};

BB8_2:
	ret;
}

	// .globl	kernelCopyBufToTexC
.visible .entry kernelCopyBufToTexC(
	.param .align 4 .b8 kernelCopyBufToTexC_param_0[12],
	.param .align 4 .b8 kernelCopyBufToTexC_param_1[12],
	.param .u32 kernelCopyBufToTexC_param_2
)
{
	.reg .pred 	%p<6>;
	.reg .b16 	%rs<2>;
	.reg .b32 	%r<27>;
	.reg .b64 	%rd<2>;


	ld.param.u32 	%r8, [kernelCopyBufToTexC_param_0+8];
	ld.param.u32 	%r7, [kernelCopyBufToTexC_param_0+4];
	ld.param.u32 	%r6, [kernelCopyBufToTexC_param_0];
	ld.param.u32 	%r10, [kernelCopyBufToTexC_param_1+8];
	ld.param.u32 	%r1, [kernelCopyBufToTexC_param_1];
	ld.param.u32 	%r5, [kernelCopyBufToTexC_param_1+4];
	ld.param.u32 	%r9, [kernelCopyBufToTexC_param_2];
	mov.u32 	%r11, %ntid.x;
	mov.u32 	%r12, %ctaid.x;
	mov.u32 	%r13, %ntid.y;
	mov.u32 	%r14, %ctaid.y;
	mov.u32 	%r15, %ntid.z;
	mov.u32 	%r16, %ctaid.z;
	mov.u32 	%r17, %tid.x;
	mad.lo.s32 	%r2, %r11, %r12, %r17;
	mov.u32 	%r18, %tid.y;
	mad.lo.s32 	%r3, %r13, %r14, %r18;
	mov.u32 	%r19, %tid.z;
	mad.lo.s32 	%r4, %r15, %r16, %r19;
	setp.ge.u32	%p1, %r3, %r5;
	setp.ge.u32	%p2, %r2, %r1;
	or.pred  	%p3, %p1, %p2;
	setp.ge.u32	%p4, %r4, %r10;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	BB9_2;

	mad.lo.s32 	%r20, %r4, %r5, %r3;
	mad.lo.s32 	%r21, %r20, %r1, %r2;
	cvta.to.global.u32 	%r22, %r9;
	add.s32 	%r23, %r22, %r21;
	add.s32 	%r24, %r2, %r6;
	add.s32 	%r25, %r3, %r7;
	add.s32 	%r26, %r4, %r8;
	ld.global.u8 	%rs1, [%r23];
	sust.b.3d.b8.trap 	[volTexOut, {%r24, %r25, %r26, %r26}], {%rs1};

BB9_2:
	ret;
}

	// .globl	kernelCopyBufToTexF
.visible .entry kernelCopyBufToTexF(
	.param .align 4 .b8 kernelCopyBufToTexF_param_0[12],
	.param .align 4 .b8 kernelCopyBufToTexF_param_1[12],
	.param .u32 kernelCopyBufToTexF_param_2
)
{
	.reg .pred 	%p<6>;
	.reg .b32 	%r<30>;
	.reg .b64 	%rd<2>;


	ld.param.u32 	%r8, [kernelCopyBufToTexF_param_0+8];
	ld.param.u32 	%r7, [kernelCopyBufToTexF_param_0+4];
	ld.param.u32 	%r6, [kernelCopyBufToTexF_param_0];
	ld.param.u32 	%r10, [kernelCopyBufToTexF_param_1+8];
	ld.param.u32 	%r1, [kernelCopyBufToTexF_param_1];
	ld.param.u32 	%r5, [kernelCopyBufToTexF_param_1+4];
	ld.param.u32 	%r9, [kernelCopyBufToTexF_param_2];
	mov.u32 	%r11, %ntid.x;
	mov.u32 	%r12, %ctaid.x;
	mov.u32 	%r13, %ntid.y;
	mov.u32 	%r14, %ctaid.y;
	mov.u32 	%r15, %ntid.z;
	mov.u32 	%r16, %ctaid.z;
	mov.u32 	%r17, %tid.x;
	mad.lo.s32 	%r2, %r11, %r12, %r17;
	mov.u32 	%r18, %tid.y;
	mad.lo.s32 	%r3, %r13, %r14, %r18;
	mov.u32 	%r19, %tid.z;
	mad.lo.s32 	%r4, %r15, %r16, %r19;
	setp.ge.u32	%p1, %r3, %r5;
	setp.ge.u32	%p2, %r2, %r1;
	or.pred  	%p3, %p1, %p2;
	setp.ge.u32	%p4, %r4, %r10;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	BB10_2;

	mad.lo.s32 	%r20, %r4, %r5, %r3;
	mad.lo.s32 	%r21, %r20, %r1, %r2;
	cvta.to.global.u32 	%r22, %r9;
	shl.b32 	%r23, %r21, 2;
	add.s32 	%r24, %r22, %r23;
	add.s32 	%r25, %r2, %r6;
	shl.b32 	%r26, %r25, 2;
	add.s32 	%r27, %r3, %r7;
	add.s32 	%r28, %r4, %r8;
	ld.global.u32 	%r29, [%r24];
	sust.b.3d.b32.trap 	[volTexOut, {%r26, %r27, %r28, %r28}], {%r29};

BB10_2:
	ret;
}

	// .globl	kernelCopyTexZYX
.visible .entry kernelCopyTexZYX(
	.param .align 4 .b8 kernelCopyTexZYX_param_0[12],
	.param .align 4 .b8 kernelCopyTexZYX_param_1[12]
)
{
	.reg .pred 	%p<6>;
	.reg .f32 	%f<8>;
	.reg .b32 	%r<24>;
	.reg .b64 	%rd<3>;


	ld.param.u32 	%r6, [kernelCopyTexZYX_param_0+8];
	ld.param.u32 	%r5, [kernelCopyTexZYX_param_0+4];
	ld.param.u32 	%r4, [kernelCopyTexZYX_param_0];
	ld.param.u32 	%r7, [kernelCopyTexZYX_param_1+8];
	ld.param.u32 	%r8, [kernelCopyTexZYX_param_1];
	ld.param.u32 	%r9, [kernelCopyTexZYX_param_1+4];
	mov.u32 	%r10, %ntid.x;
	mov.u32 	%r11, %ctaid.x;
	mov.u32 	%r12, %ntid.y;
	mov.u32 	%r13, %ctaid.y;
	mov.u32 	%r14, %ntid.z;
	mov.u32 	%r15, %ctaid.z;
	mov.u32 	%r16, %tid.x;
	mad.lo.s32 	%r1, %r10, %r11, %r16;
	mov.u32 	%r17, %tid.y;
	mad.lo.s32 	%r2, %r12, %r13, %r17;
	mov.u32 	%r18, %tid.z;
	mad.lo.s32 	%r3, %r14, %r15, %r18;
	setp.ge.u32	%p1, %r2, %r9;
	setp.ge.u32	%p2, %r1, %r8;
	or.pred  	%p3, %p2, %p1;
	setp.ge.u32	%p4, %r3, %r7;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	BB11_2;

	cvt.rn.f32.u32	%f1, %r1;
	cvt.rn.f32.u32	%f2, %r2;
	cvt.rn.f32.u32	%f3, %r3;
	tex.3d.v4.f32.f32	{%f4, %f5, %f6, %f7}, [volTexInF, {%f3, %f2, %f1, %f1}];
	add.s32 	%r19, %r1, %r4;
	shl.b32 	%r20, %r19, 2;
	add.s32 	%r21, %r2, %r5;
	add.s32 	%r22, %r3, %r6;
	mov.b32 	 %r23, %f4;
	sust.b.3d.b32.trap 	[volTexOut, {%r20, %r21, %r22, %r22}], {%r23};

BB11_2:
	ret;
}

	// .globl	kernelRetrieveTexXYZ
.visible .entry kernelRetrieveTexXYZ(
	.param .align 4 .b8 kernelRetrieveTexXYZ_param_0[12],
	.param .align 4 .b8 kernelRetrieveTexXYZ_param_1[12],
	.param .align 4 .b8 kernelRetrieveTexXYZ_param_2[12],
	.param .u32 kernelRetrieveTexXYZ_param_3
)
{
	.reg .pred 	%p<6>;
	.reg .f32 	%f<8>;
	.reg .b32 	%r<31>;
	.reg .b64 	%rd<2>;


	ld.param.u32 	%r6, [kernelRetrieveTexXYZ_param_0+8];
	ld.param.u32 	%r5, [kernelRetrieveTexXYZ_param_0+4];
	ld.param.u32 	%r4, [kernelRetrieveTexXYZ_param_0];
	ld.param.u32 	%r11, [kernelRetrieveTexXYZ_param_1+8];
	ld.param.u32 	%r12, [kernelRetrieveTexXYZ_param_1];
	ld.param.u32 	%r13, [kernelRetrieveTexXYZ_param_1+4];
	ld.param.u32 	%r8, [kernelRetrieveTexXYZ_param_2+4];
	ld.param.u32 	%r7, [kernelRetrieveTexXYZ_param_2];
	ld.param.u32 	%r10, [kernelRetrieveTexXYZ_param_3];
	mov.u32 	%r14, %ntid.x;
	mov.u32 	%r15, %ctaid.x;
	mov.u32 	%r16, %ntid.y;
	mov.u32 	%r17, %ctaid.y;
	mov.u32 	%r18, %ntid.z;
	mov.u32 	%r19, %ctaid.z;
	mov.u32 	%r20, %tid.x;
	mad.lo.s32 	%r1, %r14, %r15, %r20;
	mov.u32 	%r21, %tid.y;
	mad.lo.s32 	%r2, %r16, %r17, %r21;
	mov.u32 	%r22, %tid.z;
	mad.lo.s32 	%r3, %r18, %r19, %r22;
	setp.ge.u32	%p1, %r2, %r13;
	setp.ge.u32	%p2, %r1, %r12;
	or.pred  	%p3, %p2, %p1;
	setp.ge.u32	%p4, %r3, %r11;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	BB12_2;

	add.s32 	%r23, %r1, %r4;
	cvt.rn.f32.u32	%f1, %r23;
	add.s32 	%r24, %r2, %r5;
	cvt.rn.f32.u32	%f2, %r24;
	add.s32 	%r25, %r3, %r6;
	cvt.rn.f32.u32	%f3, %r25;
	tex.3d.v4.f32.f32	{%f4, %f5, %f6, %f7}, [volTexInF, {%f1, %f2, %f3, %f3}];
	mad.lo.s32 	%r26, %r1, %r8, %r2;
	mad.lo.s32 	%r27, %r26, %r7, %r3;
	cvta.to.global.u32 	%r28, %r10;
	shl.b32 	%r29, %r27, 2;
	add.s32 	%r30, %r28, %r29;
	st.global.f32 	[%r30], %f4;

BB12_2:
	ret;
}

	// .globl	kernelSliceTexToBuf
.visible .entry kernelSliceTexToBuf(
	.param .u32 kernelSliceTexToBuf_param_0,
	.param .align 4 .b8 kernelSliceTexToBuf_param_1[12],
	.param .u32 kernelSliceTexToBuf_param_2
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<8>;
	.reg .b32 	%r<17>;
	.reg .b64 	%rd<2>;


	ld.param.u32 	%r4, [kernelSliceTexToBuf_param_0];
	ld.param.u32 	%r1, [kernelSliceTexToBuf_param_1];
	ld.param.u32 	%r6, [kernelSliceTexToBuf_param_1+4];
	ld.param.u32 	%r5, [kernelSliceTexToBuf_param_2];
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %ctaid.x;
	mov.u32 	%r9, %tid.x;
	mad.lo.s32 	%r2, %r7, %r8, %r9;
	mov.u32 	%r10, %ntid.y;
	mov.u32 	%r11, %ctaid.y;
	mov.u32 	%r12, %tid.y;
	mad.lo.s32 	%r3, %r10, %r11, %r12;
	setp.ge.s32	%p1, %r3, %r6;
	setp.ge.s32	%p2, %r2, %r1;
	or.pred  	%p3, %p2, %p1;
	@%p3 bra 	BB13_2;

	cvta.to.global.u32 	%r13, %r5;
	cvt.rn.f32.s32	%f1, %r4;
	cvt.rn.f32.s32	%f2, %r3;
	cvt.rn.f32.s32	%f3, %r2;
	tex.3d.v4.f32.f32	{%f4, %f5, %f6, %f7}, [volTexInF, {%f3, %f2, %f1, %f1}];
	mad.lo.s32 	%r14, %r3, %r1, %r2;
	shl.b32 	%r15, %r14, 2;
	add.s32 	%r16, %r13, %r15;
	st.global.f32 	[%r16], %f4;

BB13_2:
	ret;
}

	// .globl	kernelSliceBufToTex
.visible .entry kernelSliceBufToTex(
	.param .u32 kernelSliceBufToTex_param_0,
	.param .align 4 .b8 kernelSliceBufToTex_param_1[12],
	.param .u32 kernelSliceBufToTex_param_2
)
{
	.reg .pred 	%p<4>;
	.reg .b32 	%r<19>;
	.reg .b64 	%rd<2>;


	ld.param.u32 	%r4, [kernelSliceBufToTex_param_0];
	ld.param.u32 	%r1, [kernelSliceBufToTex_param_1];
	ld.param.u32 	%r6, [kernelSliceBufToTex_param_1+4];
	ld.param.u32 	%r5, [kernelSliceBufToTex_param_2];
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %ctaid.x;
	mov.u32 	%r9, %tid.x;
	mad.lo.s32 	%r2, %r7, %r8, %r9;
	mov.u32 	%r10, %ntid.y;
	mov.u32 	%r11, %ctaid.y;
	mov.u32 	%r12, %tid.y;
	mad.lo.s32 	%r3, %r10, %r11, %r12;
	setp.ge.s32	%p1, %r3, %r6;
	setp.ge.s32	%p2, %r2, %r1;
	or.pred  	%p3, %p2, %p1;
	@%p3 bra 	BB14_2;

	cvta.to.global.u32 	%r13, %r5;
	mad.lo.s32 	%r14, %r3, %r1, %r2;
	shl.b32 	%r15, %r14, 2;
	add.s32 	%r16, %r13, %r15;
	ld.global.u32 	%r17, [%r16];
	shl.b32 	%r18, %r2, 2;
	sust.b.3d.b32.trap 	[volTexOut, {%r18, %r3, %r4, %r4}], {%r17};

BB14_2:
	ret;
}


